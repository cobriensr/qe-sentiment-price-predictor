name: Deploy Backend

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: 'us-east-1'
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8
        working-directory: backend

      - name: Lint with flake8
        run: |
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        working-directory: backend

      - name: Run tests with pytest
        run: |
          pytest tests/ -v --cov=src --cov-report=xml
        working-directory: backend

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  deploy:
    name: Deploy Lambda Functions
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        function: [sentiment-analyzer, stock-data-fetcher, prediction-engine]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -t ./package/
        working-directory: backend

      - name: Copy source code
        run: |
          cp -r src/* package/
        working-directory: backend

      - name: Create deployment package
        run: |
          cd package
          zip -r ../deployment.zip .
        working-directory: backend

      - name: Get function name
        id: function-name
        run: |
          ENV="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          FUNCTION_NAME="earnings-sentiment-${{ matrix.function }}-${ENV}"
          echo "name=${FUNCTION_NAME}" >> $GITHUB_OUTPUT

      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name ${{ steps.function-name.outputs.name }} \
            --zip-file fileb://deployment.zip \
            --region ${{ env.AWS_REGION }}
        working-directory: backend

      - name: Wait for update to complete
        run: |
          aws lambda wait function-updated \
            --function-name ${{ steps.function-name.outputs.name }} \
            --region ${{ env.AWS_REGION }}

      - name: Update function configuration
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ steps.function-name.outputs.name }} \
            --environment Variables="{
              ENVIRONMENT=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }},
              ML_MODELS_BUCKET=${{ secrets.ML_MODELS_BUCKET }},
              EARNINGS_DATA_BUCKET=${{ secrets.EARNINGS_DATA_BUCKET }},
              ALPHA_VANTAGE_API_KEY=${{ secrets.ALPHA_VANTAGE_API_KEY }}
            }" \
            --region ${{ env.AWS_REGION }}

      - name: Run health check
        run: |
          # Get function URL from AWS (you'll need to set this up in Terraform)
          FUNCTION_URL=$(aws lambda get-function-url-config \
            --function-name ${{ steps.function-name.outputs.name }} \
            --query 'FunctionUrl' --output text 2>/dev/null || echo "")
          
          if [ ! -z "$FUNCTION_URL" ]; then
            echo "Testing function health check..."
            curl -f "${FUNCTION_URL}health" || echo "Health check failed"
          else
            echo "No function URL configured for health check"
          fi

  integration-tests:
    name: Run Integration Tests
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        run: |
          pip install requests pytest boto3
        working-directory: backend

      - name: Run integration tests
        run: |
          # Set API Gateway URL for testing
          export API_BASE_URL="${{ secrets.API_GATEWAY_URL }}"
          export ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          
          # Run integration tests
          pytest tests/integration/ -v
        working-directory: backend