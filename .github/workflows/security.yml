name: Security Scans
on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/lambda/**'
      - 'src/lambda2/**'
      - 'src/lambda3/**'
      - 'terraform/**'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily scan
permissions:
  security-events: write
  contents: read
  pull-requests: write
jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy fs scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Run Trivy config scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Build Docker images for scanning
        run: |
          cd src/lambda
          docker build -t lambda1-image . || echo "Failed to build lambda1-image"
          cd ../lambda2
          docker build -t lambda2-image . || echo "Failed to build lambda2-image"
          cd ../lambda3
          docker build -t lambda3-image . || echo "Failed to build lambda3-image"

      - name: Scan Lambda1 Docker image
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'image'
          image-ref: 'lambda1-image'
          format: 'sarif'
          output: 'trivy-docker-lambda1.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Scan Lambda2 Docker image
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'image'
          image-ref: 'lambda2-image'
          format: 'sarif'
          output: 'trivy-docker-lambda2.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Scan Lambda3 Docker image
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'image'
          image-ref: 'lambda3-image'
          format: 'sarif'
          output: 'trivy-docker-lambda3.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
  
      - name: Install Anchore Grype
        run: curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin
        
      - name: Scan Lambda1 Docker image with Anchore Grype
        run: grype lambda1-image --output sarif > lambda1-grype-results.sarif
        continue-on-error: true
        
      - name: Scan Lambda2 Docker image with Anchore Grype
        run: grype lambda2-image --output sarif > lambda2-grype-results.sarif
        continue-on-error: true
        
      - name: Scan Lambda3 Docker image with Anchore Grype
        run: grype lambda3-image --output sarif > lambda3-grype-results.sarif
        continue-on-error: true

      - name: Scan Python dependencies
        run: |
          pip install safety
          for dir in src/lambda*; do
            if [ -f "$dir/requirements.txt" ]; then
              echo "Scanning $dir"
              safety check -r "$dir/requirements.txt" --json > "$dir/safety-report.json" || echo "Safety check failed for $dir"
            fi
          done

      - name: Run tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        continue-on-error: true
        with:
          sarif_file: trivy-terraform-scan.sarif
    
      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_version: 'v14'
          policy_type: 'aws'
          verbose: true
          only_warn: true
          sarif_upload: true
          iac_dir: 'terraform'

      - name: Upload Terrascan SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: terrascan.sarif
          wait-for-processing: true

      # Debug step to list available SARIF files
      - name: List SARIF files
        run: |
          echo "Available SARIF files:"
          ls -la trivy-*.sarif || echo "No trivy SARIF files found"

      # Individual upload steps for each SARIF file
      - name: Upload Filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-fs-results.sarif') != ''
        with:
          sarif_file: trivy-fs-results.sarif
          category: trivy-fs

      - name: Upload Config scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-config-results.sarif') != ''
        with:
          sarif_file: trivy-config-results.sarif
          category: trivy-config

      - name: Upload Lambda1 Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-docker-lambda1.sarif') != ''
        with:
          sarif_file: trivy-docker-lambda1.sarif
          category: trivy-docker-lambda1

      - name: Upload Lambda2 Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-docker-lambda2.sarif') != ''
        with:
          sarif_file: trivy-docker-lambda2.sarif
          category: trivy-docker-lambda2

      - name: Upload Lambda3 Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-docker-lambda3.sarif') != ''
        with:
          sarif_file: trivy-docker-lambda3.sarif
          category: trivy-docker-lambda3

      - name: Upload Terraform scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-terraform-scan.sarif') != ''
        with:
          sarif_file: trivy-terraform-scan.sarif
          category: trivy-terraform
  
      - name: Upload Lambda1 Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('lambda1-grype-results.sarif') != ''
        with:
          sarif_file: lambda1-grype-results.sarif
          category: grype-lambda1

      - name: Upload Lambda2 Grype scan results  
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('lambda2-grype-results.sarif') != ''
        with:
          sarif_file: lambda2-grype-results.sarif
          category: grype-lambda2
          
      - name: Upload Lambda3 Grype scan results
        uses: github/codeql-action/upload-sarif@v3 
        if: always() && hashFiles('lambda3-grype-results.sarif') != ''
        with:
          sarif_file: lambda3-grype-results.sarif
          category: grype-lambda3

      - name: Create summary report
        if: github.event_name == 'pull_request'
        run: |
          echo "## Security Scan Summary" > summary.md
          
          echo "### Trivy Filesystem Scan" >> summary.md
          if [ -f trivy-fs-results.sarif ]; then
            jq -r '.runs[].results[] | "- \(.level): \(.message.text)"' trivy-fs-results.sarif >> summary.md || echo "No filesystem vulnerabilities found" >> summary.md
          else
            echo "Filesystem scan was not completed" >> summary.md
          fi
          
          echo "### Trivy Configuration Scan" >> summary.md
          if [ -f trivy-config-results.sarif ]; then
            jq -r '.runs[].results[] | "- \(.level): \(.message.text)"' trivy-config-results.sarif >> summary.md || echo "No configuration vulnerabilities found" >> summary.md
          else
            echo "Configuration scan was not completed" >> summary.md
          fi
          
          echo "### Docker Image Scans" >> summary.md
          for lambda in 1 2 3; do
            echo "#### Lambda$lambda" >> summary.md
            if [ -f "trivy-docker-lambda$lambda.sarif" ]; then
              jq -r '.runs[].results[] | "- \(.level): \(.message.text)"' "trivy-docker-lambda$lambda.sarif" >> summary.md || echo "No vulnerabilities found" >> summary.md
            else
              echo "Docker scan was not completed" >> summary.md
            fi
          done
          
          echo "### Terraform Scan" >> summary.md
          if [ -f trivy-terraform-scan.sarif ]; then
            jq -r '.runs[].results[] | "- \(.level): \(.message.text)"' trivy-terraform-scan.sarif >> summary.md || echo "No Terraform vulnerabilities found" >> summary.md
          else
            echo "Terraform scan was not completed" >> summary.md
          fi
          
          echo "### Python Dependencies Scan" >> summary.md
          for dir in src/lambda*; do
            if [ -f "$dir/safety-report.json" ]; then
              echo "#### $dir" >> summary.md
              jq -r '.[] | "- \(.dependency): \(.vulnerability)"' "$dir/safety-report.json" >> summary.md || echo "No Python vulnerabilities found" >> summary.md
            else
              echo "#### $dir" >> summary.md
              echo "Python dependency scan was not completed" >> summary.md
            fi
          done

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });