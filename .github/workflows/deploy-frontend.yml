name: Deploy Frontend

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Run linting
        run: npm run lint
        working-directory: frontend

      - name: Run type check
        run: npm run type-check
        working-directory: frontend

      - name: Run tests
        run: npm run test:ci
        working-directory: frontend

      - name: Set API URL for prod
        if: ${{ github.event.inputs.environment == 'prod' }}
        run: |
          if [ -z "$PROD_API_URL" ]; then
            echo "PROD_API_URL secret is not set!" >&2
            exit 1
          fi
          echo "NEXT_PUBLIC_API_URL=$PROD_API_URL" >> $GITHUB_ENV

      - name: Set API URL for dev
        if: ${{ github.event.inputs.environment != 'prod' }}
        run: |
          if [ -z "$DEV_API_URL" ]; then
            echo "DEV_API_URL secret is not set!" >&2
            exit 1
          fi
          echo "NEXT_PUBLIC_API_URL=$DEV_API_URL" >> $GITHUB_ENV

      - name: Build application
        env:
          NEXT_PUBLIC_ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
        run: npm run build
        working-directory: frontend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: frontend/.next/
          retention-days: 1

  deploy-amplify:
    name: Deploy to AWS Amplify
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Build application with environment variables
        env:
          NEXT_PUBLIC_API_URL: ${{ github.event.inputs.environment == 'prod' && secrets.PROD_API_URL || secrets.DEV_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
          NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
        run: npm run build
        working-directory: frontend

      - name: Deploy to Amplify
        run: |
          # Get the appropriate Amplify App ID based on environment
          ENV="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          
          if [ "$ENV" = "prod" ]; then
            APP_ID="${{ secrets.AMPLIFY_APP_ID_PROD }}"
            BRANCH_NAME="main"
          else
            APP_ID="${{ secrets.AMPLIFY_APP_ID_DEV }}"
            BRANCH_NAME="develop"
          fi
          
          # Create a new deployment
          JOB_ID=$(aws amplify start-job \
            --app-id $APP_ID \
            --branch-name $BRANCH_NAME \
            --job-type RELEASE \
            --query 'jobSummary.jobId' \
            --output text)
          
          echo "Amplify deployment started with Job ID: $JOB_ID"
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT
          echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
        id: deploy

      - name: Wait for deployment to complete
        run: |
          JOB_ID="${{ steps.deploy.outputs.job_id }}"
          APP_ID="${{ steps.deploy.outputs.app_id }}"
          
          echo "Waiting for deployment to complete..."
          
          # Wait for up to 15 minutes
          for i in {1..30}; do
            STATUS=$(aws amplify get-job \
              --app-id $APP_ID \
              --branch-name ${{ github.ref == 'refs/heads/main' && 'main' || 'develop' }} \
              --job-id $JOB_ID \
              --query 'job.summary.status' \
              --output text)
            
            echo "Deployment status: $STATUS"
            
            if [ "$STATUS" = "SUCCEED" ]; then
              echo "Deployment completed successfully!"
              break
            elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "CANCELLED" ]; then
              echo "Deployment failed with status: $STATUS"
              exit 1
            fi
            
            echo "Waiting 30 seconds before checking again..."
            sleep 30
          done
          
          if [ "$STATUS" != "SUCCEED" ]; then
            echo "Deployment timed out or failed"
            exit 1
          fi

      - name: Get deployment URL
        run: |
          ENV="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          APP_ID="${{ steps.deploy.outputs.app_id }}"
          BRANCH_NAME="${{ github.ref == 'refs/heads/main' && 'main' || 'develop' }}"
          
          # Get the deployment URL
          URL=$(aws amplify get-branch \
            --app-id $APP_ID \
            --branch-name $BRANCH_NAME \
            --query 'branch.branchName' \
            --output text)
          
          # Construct the full URL
          if [ "$ENV" = "prod" ]; then
            FULL_URL="https://main.$APP_ID.amplifyapp.com"
          else
            FULL_URL="https://develop.$APP_ID.amplifyapp.com"
          fi
          
          echo "Application deployed to: $FULL_URL"
          echo "deployment_url=$FULL_URL" >> $GITHUB_OUTPUT
        id: get-url

      - name: Run smoke tests
        run: |
          URL="${{ steps.get-url.outputs.deployment_url }}"
          
          echo "Running smoke tests against: $URL"
          
          # Basic health check
          curl -f "$URL" || (echo "Health check failed" && exit 1)
          
          # Check if API integration is working (optional)
          curl -f "$URL/api/health" || echo "API health check failed (might be expected if not implemented)"
          
          echo "Smoke tests completed successfully!"

      - name: Update GitHub deployment status
        if: always()
        run: |
          ENV="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          URL="${{ steps.get-url.outputs.deployment_url }}"
          
          if [ "${{ job.status }}" = "success" ]; then
            STATE="success"
            DESCRIPTION="Deployment completed successfully"
          else
            STATE="failure"
            DESCRIPTION="Deployment failed"
          fi
          
          # Create deployment status (requires GITHUB_TOKEN with deployments permission)
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/deployments" \
            -d "{
              \"ref\": \"${{ github.sha }}\",
              \"environment\": \"$ENV\",
              \"description\": \"$DESCRIPTION\",
              \"auto_merge\": false,
              \"required_contexts\": []
            }"