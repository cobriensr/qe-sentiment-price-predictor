name: Terraform Security Scans
on:
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '**/*.tf'
      - '**/*.tfvars'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily scan

permissions:
  security-events: write
  contents: read
  pull-requests: write

jobs:
  terraform-security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Run tfsec (Terraform Security Scanner)
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        continue-on-error: true
        with:
          sarif_file: tfsec-results.sarif

      - name: Upload tfsec SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif
          category: tfsec

      - name: Run Terrascan (Terraform Policy Scanner)
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_version: 'v14'
          policy_type: 'aws'
          verbose: true
          only_warn: true
          sarif_upload: true
          iac_dir: 'terraform'

      - name: Upload Terrascan SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: terrascan.sarif
          category: terrascan

      - name: Run Checkov (Terraform Static Analysis)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          quiet: true
          soft_fail: true

      - name: Upload Checkov SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: checkov

      - name: Debug - List all SARIF files
        if: always()
        run: |
          echo "Available SARIF files:"
          find . -name "*.sarif" -type f | while read file; do
            echo "File: $file"
            echo "Size: $(wc -l < "$file") lines"
          done

      - name: Create Terraform security summary
        if: github.event_name == 'pull_request'
        run: |
          echo "# üîí Terraform Security Scan Results" > security-summary.md
          echo "" >> security-summary.md
          
          # Function to process SARIF and count issues
          process_sarif() {
            local file=$1
            local tool=$2
            
            if [ -f "$file" ]; then
              local high_count=$(jq -r '[.runs[].results[] | select(.level == "error")] | length' "$file" 2>/dev/null || echo "0")
              local medium_count=$(jq -r '[.runs[].results[] | select(.level == "warning")] | length' "$file" 2>/dev/null || echo "0")
              local low_count=$(jq -r '[.runs[].results[] | select(.level == "note" or .level == "info")] | length' "$file" 2>/dev/null || echo "0")
              local total_count=$((high_count + medium_count + low_count))
              
              echo "## $tool Results" >> security-summary.md
              echo "- üî¥ High severity: $high_count" >> security-summary.md
              echo "- üü° Medium severity: $medium_count" >> security-summary.md
              echo "- üîµ Low severity: $low_count" >> security-summary.md
              echo "- **Total issues: $total_count**" >> security-summary.md
              echo "" >> security-summary.md
              
              if [ $total_count -gt 0 ]; then
                echo "### Top Issues:" >> security-summary.md
                jq -r '.runs[].results[] | "- **\(.level | ascii_upcase)**: \(.message.text)" | .[0:200]' "$file" 2>/dev/null | head -5 >> security-summary.md || echo "Could not parse detailed results" >> security-summary.md
                echo "" >> security-summary.md
              fi
            else
              echo "## $tool Results" >> security-summary.md
              echo "‚ùå Scan file not found: $file" >> security-summary.md
              echo "" >> security-summary.md
            fi
          }
          
          # Process each security tool's results
          process_sarif "tfsec-results.sarif" "üõ°Ô∏è TFSec"
          process_sarif "terrascan.sarif" "üîç Terrascan" 
          process_sarif "checkov-results.sarif" "‚úÖ Checkov"
          
          echo "---" >> security-summary.md
          echo "üìä **Scan completed at:** $(date)" >> security-summary.md
          echo "üîó **View detailed results in the Security tab**" >> security-summary.md

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              
              // Check if there's already a comment from this workflow
              const comments = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              const existingComment = comments.data.find(comment => 
                comment.body.includes('üîí Terraform Security Scan Results')
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  comment_id: existingComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: summary
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: summary
                });
              }
            } catch (error) {
              console.log('Could not read security summary file:', error);
            }

      - name: Fail workflow if high severity issues found
        if: always()
        run: |
          high_issues=0
          
          # Count high severity issues across all tools
          for file in tfsec-results.sarif terrascan.sarif checkov-results.sarif; do
            if [ -f "$file" ]; then
              count=$(jq -r '[.runs[].results[] | select(.level == "error")] | length' "$file" 2>/dev/null || echo "0")
              high_issues=$((high_issues + count))
            fi
          done
          
          echo "Total high severity issues found: $high_issues"
          
          if [ $high_issues -gt 0 ]; then
            echo "‚ùå Workflow failed due to high severity security issues"
            exit 1
          else
            echo "‚úÖ No high severity security issues found"
          fi